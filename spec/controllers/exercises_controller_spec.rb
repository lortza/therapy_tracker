# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ExercisesController, type: :controller do
  login_user

  let(:valid_attributes) { build(:exercise, user_id: subject.current_user.id).attributes }
  let(:invalid_attributes) { build(:exercise, user_id: nil, name: "").attributes }

  describe "GET #index" do
    it "returns a success response" do
      Exercise.create! valid_attributes
      get :index, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      exercise = Exercise.create! valid_attributes
      get :edit, params: {id: exercise.to_param}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Exercise" do
        expect {
          post :create, params: {exercise: valid_attributes}
        }.to change(Exercise, :count).by(1)
      end

      it "redirects to the exercise index page" do
        post :create, params: {exercise: valid_attributes}
        expect(response).to redirect_to(exercises_path)
      end
    end

    context "with invalid params" do
      it 'returns a success response (i.e. to display the "new" template)' do
        post :create, params: {exercise: invalid_attributes}
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) { build(:exercise, user_id: User.first, name: "updated name").attributes }

      it "updates the requested exercise" do
        exercise = Exercise.create! valid_attributes
        put :update, params: {id: exercise.to_param, exercise: new_attributes}
        exercise.reload
      end

      it "redirects to the exercise index page" do
        exercise = Exercise.create! valid_attributes
        put :update, params: {id: exercise.to_param, exercise: valid_attributes}
        expect(response).to redirect_to(exercises_path)
      end
    end

    context "with invalid params" do
      it 'returns a success response (i.e. to display the "edit" template)' do
        exercise = Exercise.create! valid_attributes
        put :update, params: {id: exercise.to_param, exercise: invalid_attributes}
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested exercise" do
      exercise = Exercise.create! valid_attributes
      expect {
        delete :destroy, params: {id: exercise.to_param}
      }.to change(Exercise, :count).by(-1)
    end

    it "redirects to the exercises list" do
      exercise = Exercise.create! valid_attributes
      delete :destroy, params: {id: exercise.to_param}
      expect(response).to redirect_to(exercises_url)
    end
  end
end
